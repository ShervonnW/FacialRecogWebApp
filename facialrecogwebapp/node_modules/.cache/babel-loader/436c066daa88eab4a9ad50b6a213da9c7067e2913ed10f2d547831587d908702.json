{"ast":null,"code":"var _jsxFileName = \"E:\\\\ZTMProjects\\\\FacialRecogApp\\\\facialrecogwebapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n    this.onButtonSubmit = event => {\n      console.log('click');\n      const returnClarifiRequestOptions = imageUrl => {\n        // Your PAT (Personal Access Token) can be found in the Account's Security section\n        const PAT = 'daa936fb4067482cb04eb292c5269f03';\n        // Specify the correct user_id/app_id pairings\n        // Since you're making inferences outside your app's scope\n        const USER_ID = 'acc5n45nn80u';\n        const APP_ID = 'FaceDetection';\n        // Change these to whatever model and image URL you want to use\n        const MODEL_ID = 'face-detection';\n        const IMAGE_URL = imageUrl;\n        const raw = JSON.stringify({\n          \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n          },\n          \"inputs\": [{\n            \"data\": {\n              \"image\": {\n                \"url\": IMAGE_URL\n              }\n            }\n          }]\n        });\n        return {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n          },\n          body: raw\n        };\n      };\n      ///////////////////////////////////////////////////////////////////////////////////\n      // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n      ///////////////////////////////////////////////////////////////////////////////////\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n    };\n    this.state = {\n      input: ''\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"polygon\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","ImageLinkForm","Rank","ParticlesBg","jsxDEV","_jsxDEV","App","constructor","onInputChange","event","console","log","target","value","onButtonSubmit","returnClarifiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","method","headers","body","fetch","requestOptions","then","response","text","result","catch","error","state","input","render","className","children","type","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["E:/ZTMProjects/FacialRecogApp/facialrecogwebapp/src/App.js"],"sourcesContent":["import React, {Component} from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\n\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n    }\n  }\n\n  onInputChange = (event) => {\n    console.log(event.target.value);\n  }\n\n  onButtonSubmit = (event) => {\n    console.log('click')\n\n    const returnClarifiRequestOptions = (imageUrl) => {\n      // Your PAT (Personal Access Token) can be found in the Account's Security section\n    const PAT = 'daa936fb4067482cb04eb292c5269f03';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'acc5n45nn80u';       \n    const APP_ID = 'FaceDetection';\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'face-detection';   \n    const IMAGE_URL = imageUrl;\n\n    const raw = JSON.stringify({\n      \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n      },\n      \"inputs\": [\n          {\n              \"data\": {\n                  \"image\": {\n                      \"url\": IMAGE_URL\n                  }\n              }\n          }\n      ]\n    });\n    return {\n      method: 'POST',\n      headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Key ' + PAT\n      },\n      body: raw\n    };\n    }\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n\n\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID +  \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n  \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ParticlesBg type=\"polygon\" bg={true} />\n        <Navigation />\n        <Logo />\n        <Rank />\n        <ImageLinkForm \n          onInputChange={this.onInputChange} \n          onButtonSubmit={this.onButtonSubmit}\n        />\n        {/*\n        <ImageLinkForm />\n        <FaceRecognition />*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}