{"ast":null,"code":"var _jsxFileName = \"E:\\\\ZTMProjects\\\\FacialRecogApp\\\\facialrecogwebapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin.js';\nimport Register from './components/Register/Register.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifiRequestOptions = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the Account's Security section\n  const PAT = 'daa936fb4067482cb04eb292c5269f03';\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = 'acc5n45nn80u';\n  const APP_ID = 'FaceDetection';\n  // Change these to whatever model and image URL you want to use\n  const MODEL_ID = 'face-detection';\n  const IMAGE_URL = imageUrl;\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  boxes: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    //time submitted the photos\n    joined: ''\n  }\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n    this.calculateFaceLocations = data => {\n      if (!data.outputs || !data.outputs[0].data.regions) {\n        return [];\n      }\n      const regions = data.outputs[0].data.regions;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return regions.map(region => {\n        const clarifaiFace = region.region_info.bounding_box;\n        return {\n          leftCol: clarifaiFace.left_col * width,\n          topRow: clarifaiFace.top_row * height,\n          rightCol: width - clarifaiFace.right_col * width,\n          bottomRow: height - clarifaiFace.bottom_row * height\n        };\n      });\n    };\n    this.displayFaceBoxes = boxes => {\n      //console.log(box)\n      this.setState({\n        boxes: boxes\n      });\n    };\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' + \"/outputs\", returnClarifiRequestOptions(this.state.input)).then(response => response.json()).then(response => {\n        //console.log('hi', response)\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: {\n              'Content-type': 'application/json'\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          }).catch(console.log);\n        }\n        this.displayFaceBoxes(this.calculateFaceLocations(response));\n      }).catch(err => console.log(err));\n    };\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState(initialState);\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n      this.setState({\n        route: route\n      });\n    };\n    this.state = initialState;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"polygon\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: this.state.isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), this.state.route === 'home' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          boxes: this.state.boxes,\n          imageUrl: this.state.imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }, this) : this.state.route === 'signin' ? /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Signin","Register","Logo","ImageLinkForm","FaceRecognition","Rank","ParticlesBg","jsxDEV","_jsxDEV","returnClarifiRequestOptions","imageUrl","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","initialState","input","boxes","route","isSignedIn","user","id","name","email","entries","joined","App","constructor","loadUser","data","setState","calculateFaceLocations","outputs","regions","image","document","getElementById","width","Number","height","map","region","clarifaiFace","region_info","bounding_box","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBoxes","onInputChange","event","target","value","onButtonSubmit","state","fetch","then","response","json","count","Object","assign","catch","console","log","err","onRouteChange","render","className","children","type","bg","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["E:/ZTMProjects/FacialRecogApp/facialrecogwebapp/src/App.js"],"sourcesContent":["import React, {Component} from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin.js';\nimport Register from './components/Register/Register.js';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition.js';\nimport Rank from './components/Rank/Rank';\nimport ParticlesBg from 'particles-bg';\nimport './App.css';\n\n\nconst returnClarifiRequestOptions = (imageUrl) => {\n  // Your PAT (Personal Access Token) can be found in the Account's Security section\nconst PAT = 'daa936fb4067482cb04eb292c5269f03';\n// Specify the correct user_id/app_id pairings\n// Since you're making inferences outside your app's scope\nconst USER_ID = 'acc5n45nn80u';       \nconst APP_ID = 'FaceDetection';\n// Change these to whatever model and image URL you want to use\nconst MODEL_ID = 'face-detection';   \nconst IMAGE_URL = imageUrl;\n\nconst raw = JSON.stringify({\n  \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n  },\n  \"inputs\": [\n      {\n          \"data\": {\n              \"image\": {\n                  \"url\": IMAGE_URL\n              }\n          }\n      }\n  ]\n});\nconst requestOptions = {\n  method: 'POST',\n  headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n  },\n  body: raw\n};\n\nreturn requestOptions;\n}\n\n\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  boxes: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email:'',\n    entries: 0, //time submitted the photos\n    joined: ''\n  }\n}\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n\n  loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email:data.email,\n      entries: data.entries, \n      joined: data.joined\n    }})\n  }\n\n  calculateFaceLocations = (data) => {\n    if (!data.outputs || !data.outputs[0].data.regions) {\n      return [];\n    }\n    const regions = data.outputs[0].data.regions;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return regions.map(region => {\n      const clarifaiFace = region.region_info.bounding_box;\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - (clarifaiFace.right_col * width),\n        bottomRow: height - (clarifaiFace.bottom_row * height)\n      };\n    });\n  }\n\n  displayFaceBoxes = (boxes) => {\n    //console.log(box)\n    this.setState({boxes: boxes})\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    fetch(\"https://api.clarifai.com/v2/models/\" + 'face-detection' +  \"/outputs\", returnClarifiRequestOptions(this.state.input))\n      .then(response => response.json())\n      .then(response => {\n        //console.log('hi', response)\n        if (response) {\n          fetch('http://localhost:3000/image', {\n              method:'put',\n              headers:{'Content-type':'application/json'},\n              body:JSON.stringify({\n                id: this.state.user.id,\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              this.setState(Object.assign(this.state.user, {entries: count}))\n            })\n            .catch(console.log)\n        }\n        this.displayFaceBoxes(this.calculateFaceLocations(response));\n      })\n      .catch(err => console.log(err));\n  }\n\n  onRouteChange = (route) => {\n    if(route === 'signout') {\n      this.setState(initialState)\n    } \n    else if (route === 'home') {\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route})\n  }\n\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <ParticlesBg type=\"polygon\" bg={true} />\n        <Navigation isSignedIn={this.state.isSignedIn} onRouteChange={this.onRouteChange}/>\n        { this.state.route === 'home'\n            ? <div>\n                <Logo />\n                <Rank name={this.state.user.name} entries={this.state.user.entries}/>\n                <ImageLinkForm \n                  onInputChange={this.onInputChange} \n                  onButtonSubmit={this.onButtonSubmit}\n                />\n                <FaceRecognition boxes={this.state.boxes} imageUrl={this.state.imageUrl}/>\n              </div>\n            : (\n                this.state.route === 'signin' \n                ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n                : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\n              )\n\n       }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}